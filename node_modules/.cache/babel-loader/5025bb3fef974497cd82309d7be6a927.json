{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Main-WFM\\\\frontend\\\\src\\\\context.js\";\nimport React, { Component } from \"react\";\nimport items from \"./data\"; //This is context for all the consumers\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomContext = /*#__PURE__*/React.createContext();\n\nclass RoomProvider extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      bookedRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      place: \"Shimla\" // breakfast:false,\n      // pets:false\n\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms); //   console.log(type,name,value);\n    };\n\n    this.handleClick = event => {\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.bookedRooms); //   console.log(type,name,value);\n    };\n\n    this.filterRooms = () => {\n      //   console.log(\"Hello\");\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        place\n      } = this.state; //All the rooms\n\n      let tempRooms = [...rooms]; //Transfor values as the number in capacity get changed to string\n\n      capacity = parseInt(capacity); //Transfor values as the number in price get changed to string\n\n      price = parseInt(price); //filter by Type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filter by Capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filter by Place\n\n\n      if (place !== 'None') {\n        tempRooms = tempRooms.filter(room => room.place === place);\n      } //filter by Price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price);\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n\n    this.bookedRooms = () => {\n      //   console.log(\"Hello\");\n      let {\n        rooms\n      } = this.state; //All the rooms\n\n      let tempRooms = [...rooms];\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  //getData\n  componentDidMount() {\n    let rooms = this.formatData(items); // console.log(rooms);\n    //This will bring all the featured rooms\n\n    let featuredRooms = rooms.filter(room => room.featured === true); //Calculating the Max Price from all the rooms\n\n    let maxPrice = Math.max(...rooms.map(item => item.price)); //states updated\n\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      bookedRooms: [],\n      loading: false,\n      price: maxPrice,\n      maxPrice //   maxSize\n      // place\n\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange,\n        handleClick: this.handleClick\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer; //Higher Order Component\n\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/_jsxDEV(RoomConsumer, {\n      children: value => /*#__PURE__*/_jsxDEV(Component, { ...props,\n        context: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 16\n    }, this);\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["C:/Users/HP/Desktop/Main-WFM/frontend/src/context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","bookedRooms","loading","type","capacity","price","minPrice","maxPrice","place","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","checked","name","setState","filterRooms","handleClick","parseInt","filter","componentDidMount","formatData","featured","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport items from \"./data\";\r\n\r\n\r\n//This is context for all the consumers\r\nconst RoomContext = React.createContext();\r\n\r\nclass RoomProvider extends Component {\r\n\r\n  //Initial states \r\n  state = {\r\n    rooms: [],\r\n    sortedRooms: [],\r\n    featuredRooms: [],\r\n    bookedRooms:[],\r\n    loading: true,\r\n    type:'all',\r\n    capacity:1,\r\n    price:0,\r\n    minPrice:0,\r\n    maxPrice:0,\r\n    place:\"Shimla\",\r\n    // breakfast:false,\r\n    // pets:false\r\n  };\r\n\r\n  \r\n  //getData\r\n\r\n  componentDidMount() {\r\n    let rooms = this.formatData(items);\r\n    // console.log(rooms);\r\n    //This will bring all the featured rooms\r\n    let featuredRooms = rooms.filter(room => room.featured === true);\r\n\r\n    //Calculating the Max Price from all the rooms\r\n    let maxPrice = Math.max(...rooms.map(item =>item.price))\r\n\r\n    //states updated\r\n    this.setState({\r\n      rooms,\r\n      featuredRooms,\r\n      sortedRooms: rooms,\r\n      bookedRooms:[],\r\n      loading: false,\r\n      price:maxPrice,\r\n      maxPrice,\r\n    //   maxSize\r\n    // place\r\n    });\r\n  }\r\n\r\n  formatData(items) {\r\n    let tempItems = items.map((item) => {\r\n      let id = item.sys.id;\r\n      let images = item.fields.images.map((image) => image.fields.file.url);\r\n      let room = { ...item.fields, images, id };\r\n      return room;\r\n    });\r\n    return tempItems;\r\n  }\r\n\r\n  getRoom = (slug) => {\r\n      let tempRooms = [...this.state.rooms];\r\n      const room = tempRooms.find(room => room.slug === slug)\r\n      return room;\r\n  }\r\n\r\n\r\n  handleChange= event =>{\r\n      const target = event.target\r\n      const value  = event.type ==='checkbox'? target.checked : target.value\r\n      const name=event.target.name\r\n      this.setState({\r\n          [name]:value\r\n      },this.filterRooms)\r\n     \r\n    //   console.log(type,name,value);\r\n  }\r\n\r\n  handleClick=event =>{\r\n    const target = event.target\r\n    const value  = event.type ==='checkbox'? target.checked : target.value\r\n    const name=event.target.name\r\n    this.setState({\r\n        [name]:value\r\n    },this.bookedRooms)\r\n   \r\n  //   console.log(type,name,value);\r\n}\r\n\r\n\r\n\r\n\r\n  filterRooms = () =>{\r\n    //   console.log(\"Hello\");\r\n    let {rooms,type,capacity,price,place} = this.state;\r\n\r\n    //All the rooms\r\n    let tempRooms =[...rooms];\r\n\r\n    //Transfor values as the number in capacity get changed to string\r\n    capacity=parseInt(capacity)\r\n\r\n\r\n    //Transfor values as the number in price get changed to string\r\n    price=parseInt(price)\r\n\r\n\r\n    //filter by Type\r\n    if(type !== 'all'){\r\n        tempRooms = tempRooms.filter(room => room.type === type)\r\n    }\r\n\r\n    //filter by Capacity\r\n    if(capacity !== 1){\r\n        tempRooms = tempRooms.filter(room =>room.capacity >=capacity)\r\n    }\r\n\r\n    //filter by Place\r\n    if(place !== 'None'){\r\n        tempRooms = tempRooms.filter(room => room.place === place)\r\n    }\r\n\r\n    //filter by Price\r\n    \r\n        tempRooms = tempRooms.filter(room =>room.price <=price)\r\n    \r\n\r\n    this.setState({\r\n        sortedRooms:tempRooms\r\n    })\r\n\r\n  }\r\n\r\n\r\n bookedRooms = () =>{\r\n    //   console.log(\"Hello\");\r\n    let {rooms} = this.state;\r\n\r\n    //All the rooms\r\n    let tempRooms =[...rooms];    \r\n\r\n    this.setState({\r\n        sortedRooms:tempRooms\r\n    })\r\n\r\n  }\r\n\r\n\r\n  \r\n\r\n\r\n  render() {\r\n    return (\r\n      <RoomContext.Provider value={{ ...this.state,getRoom:this.getRoom,handleChange:this.handleChange,handleClick:this.handleClick}}>\r\n        {this.props.children}\r\n      </RoomContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst RoomConsumer = RoomContext.Consumer;\r\n\r\n//Higher Order Component\r\nexport function withRoomConsumer(Component){\r\n    return function ConsumerWrapper(props){\r\n        return <RoomConsumer>\r\n            {value => <Component {...props} context={value}/>}\r\n        </RoomConsumer>\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport { RoomProvider, RoomConsumer, RoomContext };\r\n"]},"metadata":{},"sourceType":"module"}