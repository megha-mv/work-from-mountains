{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Main-WFM\\\\frontend\\\\src\\\\context.js\";\nimport React, { Component } from \"react\";\nimport items from \"./data\"; //This is context for all the consumers\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomContext = /*#__PURE__*/React.createContext();\n\nclass RoomProvider extends Component {\n  constructor(props) {\n    super(props); //Initial states \n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms); //   console.log(type,name,value);\n    };\n\n    this.handleClick = event => {\n      // console.log(\"rendering from Context.js\");\n      const name = event.target.name;\n      console.log(name);\n      this.setState({\n        place: \"rome\"\n      }, this.bookedRooms);\n    };\n\n    this.filterRooms = () => {\n      //   console.log(\"Hello\");\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        place\n      } = this.state; //All the rooms\n\n      let tempRooms = [...rooms]; //Transfor values as the number in capacity get changed to string\n\n      capacity = parseInt(capacity); //Transfor values as the number in price get changed to string\n\n      price = parseInt(price); //filter by Type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filter by Capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filter by Place\n\n\n      if (place !== 'None') {\n        tempRooms = tempRooms.filter(room => room.place === place);\n      } //filter by Price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price);\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n\n    this.bookedRooms = () => {\n      let {\n        rooms\n      } = this.state;\n      let tempRooms = [...rooms]; // tempRooms = tempRooms.filter(room =>room.name ===name)  \n\n      console.log(\"Hello\");\n      this.setState({\n        bookedRooms: tempRooms\n      });\n    };\n\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      bookedRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      bookId: 0,\n      slug: this.props.match.params.slug,\n      place: \"Shimla\" // breakfast:false,\n      // pets:false\n\n    };\n  } //getData\n\n\n  componentDidMount() {\n    let rooms = this.formatData(items); // console.log(rooms);\n    //This will bring all the featured rooms\n\n    let featuredRooms = rooms.filter(room => room.featured === true); //Calculating the Max Price from all the rooms\n\n    let maxPrice = Math.max(...rooms.map(item => item.price)); //Calculate random booking-Id\n\n    const min = 1;\n    const max = 100;\n    const bookId = Math.floor(min + Math.random() * (max - min)); //Fetch single room details\n\n    let room = this.getRoom(this.state.slug); //states updated\n\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      bookedRooms: room,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      bookId: bookId // place,\n      //   maxSize\n\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange,\n        handleClick: this.handleClick\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer; //Higher Order Component\n\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/_jsxDEV(RoomConsumer, {\n      children: value => /*#__PURE__*/_jsxDEV(Component, { ...props,\n        context: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 16\n    }, this);\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["C:/Users/HP/Desktop/Main-WFM/frontend/src/context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","constructor","props","getRoom","slug","tempRooms","state","rooms","room","find","handleChange","event","target","value","type","checked","name","setState","filterRooms","handleClick","console","log","place","bookedRooms","capacity","price","parseInt","filter","sortedRooms","featuredRooms","loading","minPrice","maxPrice","bookId","match","params","componentDidMount","formatData","featured","Math","max","map","item","min","floor","random","tempItems","id","sys","images","fields","image","file","url","render","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport items from \"./data\";\r\n\r\n\r\n//This is context for all the consumers\r\nconst RoomContext = React.createContext();\r\n\r\nclass RoomProvider extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n\r\n  //Initial states \r\n  this.state = {\r\n    rooms: [],\r\n    sortedRooms: [],\r\n    featuredRooms: [],\r\n    bookedRooms:[],\r\n    loading: true,\r\n    type:'all',\r\n    capacity:1,\r\n    price:0,\r\n    minPrice:0,\r\n    maxPrice:0,\r\n    bookId:0,\r\n    slug : this.props.match.params.slug,\r\n    place:\"Shimla\",\r\n    // breakfast:false,\r\n    // pets:false\r\n  };\r\n}\r\n\r\n  \r\n  //getData\r\n\r\n  componentDidMount() {\r\n    let rooms = this.formatData(items);\r\n    // console.log(rooms);\r\n    //This will bring all the featured rooms\r\n    let featuredRooms = rooms.filter(room => room.featured === true);\r\n\r\n    //Calculating the Max Price from all the rooms\r\n    let maxPrice = Math.max(...rooms.map(item =>item.price))\r\n\r\n    //Calculate random booking-Id\r\n    const min = 1;\r\n    const max = 100;\r\n    const bookId = Math.floor(min + (Math.random() * (max - min)));\r\n\r\n\r\n    //Fetch single room details\r\n    let room = this.getRoom(this.state.slug);\r\n    \r\n    //states updated\r\n    this.setState({\r\n      rooms,\r\n      featuredRooms,\r\n      sortedRooms: rooms,\r\n      bookedRooms:room,\r\n      loading: false,\r\n      price:maxPrice,\r\n      maxPrice,\r\n      bookId:bookId,\r\n      // place,\r\n    //   maxSize\r\n    });\r\n  }\r\n\r\n  formatData(items) {\r\n    let tempItems = items.map((item) => {\r\n      let id = item.sys.id;\r\n      let images = item.fields.images.map((image) => image.fields.file.url);\r\n      let room = { ...item.fields, images, id };\r\n      return room;\r\n    });\r\n    return tempItems;\r\n  }\r\n\r\n  getRoom = (slug) => {\r\n      let tempRooms = [...this.state.rooms];\r\n      const room = tempRooms.find(room => room.slug === slug)\r\n      return room;\r\n  }\r\n\r\n\r\n  handleChange= event =>{\r\n      const target = event.target\r\n      const value  = event.type ==='checkbox'? target.checked : target.value\r\n      const name=event.target.name\r\n      this.setState({\r\n          [name]:value\r\n      },this.filterRooms)\r\n     \r\n    //   console.log(type,name,value);\r\n  }\r\n\r\n  handleClick=event=>{\r\n    // console.log(\"rendering from Context.js\");\r\n    const name = event.target.name\r\n    console.log(name);\r\n    this.setState({\r\n      place:\"rome\",\r\n    },this.bookedRooms)    \r\n  }\r\n\r\n\r\n\r\n  filterRooms = () =>{\r\n    //   console.log(\"Hello\");\r\n    let {rooms,type,capacity,price,place} = this.state;\r\n\r\n    //All the rooms\r\n    let tempRooms =[...rooms];\r\n\r\n    //Transfor values as the number in capacity get changed to string\r\n    capacity=parseInt(capacity)\r\n\r\n\r\n    //Transfor values as the number in price get changed to string\r\n    price=parseInt(price)\r\n\r\n\r\n    //filter by Type\r\n    if(type !== 'all'){\r\n        tempRooms = tempRooms.filter(room => room.type === type)\r\n    }\r\n\r\n    //filter by Capacity\r\n    if(capacity !== 1){\r\n        tempRooms = tempRooms.filter(room =>room.capacity >=capacity)\r\n    }\r\n\r\n    //filter by Place\r\n    if(place !== 'None'){\r\n        tempRooms = tempRooms.filter(room => room.place === place)\r\n    }\r\n\r\n    //filter by Price\r\n    \r\n        tempRooms = tempRooms.filter(room =>room.price <=price)\r\n    \r\n\r\n    this.setState({\r\n        sortedRooms:tempRooms\r\n    })\r\n\r\n  }\r\n\r\n  bookedRooms=()=>{\r\n    let {rooms} = this.state;\r\n    let tempRooms =[...rooms];  \r\n    // tempRooms = tempRooms.filter(room =>room.name ===name)  \r\n    console.log(\"Hello\");\r\n    this.setState({\r\n      bookedRooms:tempRooms\r\n  })\r\n  }\r\n\r\n \r\n\r\n  render() {\r\n    return (\r\n      <RoomContext.Provider value={{ ...this.state,getRoom:this.getRoom,handleChange:this.handleChange,handleClick:this.handleClick}}>\r\n        {this.props.children}\r\n      </RoomContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst RoomConsumer = RoomContext.Consumer;\r\n\r\n//Higher Order Component\r\nexport function withRoomConsumer(Component){\r\n    return function ConsumerWrapper(props){\r\n        return <RoomConsumer>\r\n            {value => <Component {...props} context={value}/>}\r\n        </RoomConsumer>\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport { RoomProvider, RoomConsumer, RoomContext };\r\n"]},"metadata":{},"sourceType":"module"}