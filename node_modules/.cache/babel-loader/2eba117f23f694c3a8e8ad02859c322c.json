{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Main-WFM\\\\frontend\\\\src\\\\context.js\";\nimport React, { Component } from \"react\"; // import items from \"./data\";\n\nimport Client from './Contentful'; // import { response } from \"express\";\n// Client.getEntries({\n//   content_type:\"workFromMountains\"\n// }).then(response => console.log(response.items));\n//This is context for all the consumers\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomContext = /*#__PURE__*/React.createContext();\n\nclass RoomProvider extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      bookedRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      slug: 'single-economy',\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      bookId: 0,\n      place: \"Shimla\" // breakfast:false,\n      // pets:false\n\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"workFromMountains\"\n        });\n        let rooms = this.formatData(response.items);\n        let featuredRooms = rooms.filter(room => room.featured === true);\n        let maxPrice = Math.max(...rooms.map(item => item.price)); //Calculate random booking-Id\n\n        const min = 1;\n        const max = 100;\n        const bookId = Math.floor(min + Math.random() * (max - min)); //states updated\n\n        this.setState({\n          rooms,\n          featuredRooms,\n          sortedRooms: rooms,\n          loading: false,\n          price: maxPrice,\n          slug: 'None',\n          maxPrice,\n          bookId: bookId,\n          bookedRooms: rooms // place,\n          //   maxSize\n\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms); //   console.log(type,name,value);\n    };\n\n    this.filterRooms = () => {\n      //   \n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        place\n      } = this.state; //All the rooms\n\n      let tempRooms = [...rooms]; //Transfor values as the number in capacity get changed to string\n\n      capacity = parseInt(capacity); //Transfor values as the number in price get changed to string\n\n      price = parseInt(price); //filter by Type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filter by Capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filter by Place\n\n\n      if (place !== 'None') {\n        tempRooms = tempRooms.filter(room => room.place === place);\n      } //filter by Price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price);\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n\n    this.bookedRooms = () => {\n      let {\n        rooms\n      } = this.state;\n      let tempRooms = [...rooms]; // tempRooms = tempRooms.filter(room =>room.name ===name)  \n      // console.log(\"Hello\");\n\n      this.setState({\n        bookedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getData(); // let rooms = this.formatData(items);\n    // let featuredRooms = rooms.filter(room => room.featured === true);\n    // let maxPrice = Math.max(...rooms.map(item =>item.price))\n    // //Calculate random booking-Id\n    // const min = 1;\n    // const max = 100;\n    // const bookId = Math.floor(min + (Math.random() * (max - min)));\n    // //states updated\n    // this.setState({\n    //   rooms,\n    //   featuredRooms,\n    //   sortedRooms: rooms,      \n    //   loading: false,\n    //   price:maxPrice,\n    //   slug:'None',\n    //   maxPrice,\n    //   bookId:bookId,\n    //   bookedRooms:rooms,\n    //   // place,\n    // //   maxSize\n    // });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange,\n        handleClick: this.handleClick\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer; //Higher Order Component\n\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/_jsxDEV(RoomConsumer, {\n      children: value => /*#__PURE__*/_jsxDEV(Component, { ...props,\n        context: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 16\n    }, this);\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["C:/Users/HP/Desktop/Main-WFM/frontend/src/context.js"],"names":["React","Component","Client","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","bookedRooms","loading","type","capacity","slug","price","minPrice","maxPrice","bookId","place","getData","response","getEntries","content_type","formatData","items","filter","room","featured","Math","max","map","item","min","floor","random","setState","error","console","log","getRoom","tempRooms","find","handleChange","event","target","value","checked","name","filterRooms","parseInt","componentDidMount","tempItems","id","sys","images","fields","image","file","url","render","handleClick","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n// import items from \"./data\";\r\nimport Client from './Contentful';\r\n// import { response } from \"express\";\r\n\r\n// Client.getEntries({\r\n//   content_type:\"workFromMountains\"\r\n// }).then(response => console.log(response.items));\r\n\r\n\r\n//This is context for all the consumers\r\nconst RoomContext = React.createContext();\r\n\r\nclass RoomProvider extends Component {  \r\n  \r\n  state = {\r\n    rooms: [],\r\n    sortedRooms: [],\r\n    featuredRooms: [],\r\n    bookedRooms:[],\r\n    loading: true,\r\n    type:'all',\r\n    capacity:1,\r\n    slug:'single-economy',\r\n    price:0,\r\n    minPrice:0,\r\n    maxPrice:0,\r\n    bookId:0,\r\n    place:\"Shimla\",\r\n    // breakfast:false,\r\n    // pets:false\r\n  };\r\n\r\n\r\n  \r\n  //getData\r\n\r\n  getData = async () =>{\r\n    try {\r\n      let response = await Client.getEntries({\r\n        content_type:\"workFromMountains\"\r\n      });\r\n      let rooms = this.formatData(response.items);\r\n      let featuredRooms = rooms.filter(room => room.featured === true);\r\n      let maxPrice = Math.max(...rooms.map(item =>item.price))\r\n  \r\n      //Calculate random booking-Id\r\n      const min = 1;\r\n      const max = 100;\r\n      const bookId = Math.floor(min + (Math.random() * (max - min)));\r\n  \r\n  \r\n      \r\n      //states updated\r\n      this.setState({\r\n        rooms,\r\n        featuredRooms,\r\n        sortedRooms: rooms,      \r\n        loading: false,\r\n        price:maxPrice,\r\n        slug:'None',\r\n        maxPrice,\r\n        bookId:bookId,\r\n        bookedRooms:rooms,\r\n        // place,\r\n      //   maxSize\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    this.getData()\r\n    // let rooms = this.formatData(items);\r\n    // let featuredRooms = rooms.filter(room => room.featured === true);\r\n    // let maxPrice = Math.max(...rooms.map(item =>item.price))\r\n\r\n    // //Calculate random booking-Id\r\n    // const min = 1;\r\n    // const max = 100;\r\n    // const bookId = Math.floor(min + (Math.random() * (max - min)));\r\n\r\n\r\n    \r\n    // //states updated\r\n    // this.setState({\r\n    //   rooms,\r\n    //   featuredRooms,\r\n    //   sortedRooms: rooms,      \r\n    //   loading: false,\r\n    //   price:maxPrice,\r\n    //   slug:'None',\r\n    //   maxPrice,\r\n    //   bookId:bookId,\r\n    //   bookedRooms:rooms,\r\n    //   // place,\r\n    // //   maxSize\r\n    // });\r\n  }\r\n\r\n  formatData(items) {\r\n    let tempItems = items.map((item) => {\r\n      let id = item.sys.id;\r\n      let images = item.fields.images.map((image) => image.fields.file.url);\r\n      let room = { ...item.fields, images, id };\r\n      return room;\r\n    });\r\n    return tempItems;\r\n  }\r\n\r\n  getRoom = (slug) => {\r\n      let tempRooms = [...this.state.rooms];\r\n      const room = tempRooms.find(room => room.slug === slug)\r\n      return room;\r\n  }\r\n\r\n\r\n  handleChange= event =>{\r\n      const target = event.target\r\n      const value  = event.type ==='checkbox'? target.checked : target.value\r\n      const name=event.target.name\r\n      this.setState({\r\n          [name]:value\r\n      },this.filterRooms)\r\n     \r\n    //   console.log(type,name,value);\r\n  }\r\n\r\n\r\n\r\n  filterRooms = () =>{\r\n    //   \r\n    let {rooms,type,capacity,price,place} = this.state;\r\n\r\n    //All the rooms\r\n    let tempRooms =[...rooms];\r\n\r\n    //Transfor values as the number in capacity get changed to string\r\n    capacity=parseInt(capacity)\r\n\r\n\r\n    //Transfor values as the number in price get changed to string\r\n    price=parseInt(price)\r\n\r\n\r\n    //filter by Type\r\n    if(type !== 'all'){\r\n        tempRooms = tempRooms.filter(room => room.type === type)\r\n    }\r\n\r\n    //filter by Capacity\r\n    if(capacity !== 1){\r\n        tempRooms = tempRooms.filter(room =>room.capacity >=capacity)\r\n    }\r\n\r\n    //filter by Place\r\n    if(place !== 'None'){\r\n        tempRooms = tempRooms.filter(room => room.place === place)\r\n    }\r\n\r\n    //filter by Price\r\n    \r\n        tempRooms = tempRooms.filter(room =>room.price <=price)\r\n    \r\n\r\n    this.setState({\r\n        sortedRooms:tempRooms\r\n    })\r\n\r\n  }\r\n\r\n  bookedRooms=()=>{\r\n    let {rooms} = this.state;\r\n    let tempRooms =[...rooms];  \r\n    // tempRooms = tempRooms.filter(room =>room.name ===name)  \r\n    // console.log(\"Hello\");\r\n    this.setState({\r\n      bookedRooms:tempRooms\r\n  })\r\n  }\r\n\r\n \r\n\r\n  render() {\r\n    return (\r\n      <RoomContext.Provider value={{ ...this.state,getRoom:this.getRoom,handleChange:this.handleChange,handleClick:this.handleClick}}>\r\n        {this.props.children}\r\n      </RoomContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst RoomConsumer = RoomContext.Consumer;\r\n\r\n//Higher Order Component\r\nexport function withRoomConsumer(Component){\r\n    return function ConsumerWrapper(props){\r\n        return <RoomConsumer>\r\n            {value => <Component {...props} context={value}/>}\r\n        </RoomConsumer>\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport { RoomProvider, RoomConsumer, RoomContext };\r\n"]},"metadata":{},"sourceType":"module"}